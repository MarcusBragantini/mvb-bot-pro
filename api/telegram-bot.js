// =====================================================
// API: Telegram Bot - Recebe comandos do usu√°rio
// Endpoint: /api/telegram-bot
// M√©todo: POST (Webhook do Telegram)
// =====================================================

const mysql = require('mysql2/promise');

// ===== CONFIGURA√á√ÉO DO BANCO DE DADOS =====
const DB_CONFIG = {
  host: process.env.DB_HOST || 'srv806.hstgr.io',
  user: process.env.DB_USER || 'u950457610_bot_mvb_saas',
  password: process.env.DB_PASSWORD || 'Mvb985674%081521',
  database: process.env.DB_NAME || 'u950457610_bot_mvb_saas',
  port: process.env.DB_PORT || 3306,
  waitForConnections: true,
  connectionLimit: 5,
  connectTimeout: 10000,
  acquireTimeout: 10000
};

// ===== FUN√á√ÉO: ENVIAR MENSAGEM TELEGRAM =====
async function sendTelegramMessage(chatId, text, parseMode = 'HTML') {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  if (!botToken) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN n√£o configurado');
    return false;
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: parseMode
      })
    });

    const data = await response.json();
    return data.ok;
  } catch (error) {
    console.error('‚ùå Erro ao enviar mensagem Telegram:', error);
    return false;
  }
}

// ===== FUN√á√ÉO: LOG DE COMANDO =====
async function logCommand(connection, chatId, username, command, params, response, success, error = null) {
  try {
    await connection.execute(
      `INSERT INTO telegram_commands_log 
       (telegram_chat_id, telegram_username, command, parameters, response, success, error_message)
       VALUES (?, ?, ?, ?, ?, ?, ?)`,
      [chatId, username, command, JSON.stringify(params), response, success, error]
    );
  } catch (err) {
    console.error('‚ùå Erro ao salvar log:', err);
  }
}

// ===== COMANDO: /start =====
async function handleStart(connection, chatId, username, params) {
  try {
    // Buscar usu√°rio pelo telegram_chat_id
    const [users] = await connection.execute(
      'SELECT id, name, email FROM users WHERE telegram_chat_id = ?',
      [chatId]
    );

    if (users.length === 0) {
      return `‚ùå <b>Usu√°rio n√£o encontrado</b>

Para usar o bot via Telegram, voc√™ precisa:
1. Acessar https://mvb-pro.bragantini.com.br
2. Fazer login
3. Ir em Configura√ß√µes ‚Üí Telegram
4. Inserir seu chat_id: <code>${chatId}</code>

Depois disso, volte aqui e envie /start novamente.`;
    }

    const user = users[0];
    
    // Verificar se j√° tem sess√£o ativa
    const [sessions] = await connection.execute(
      'SELECT id FROM bot_sessions WHERE user_id = ? AND is_active = TRUE',
      [user.id]
    );

    if (sessions.length > 0) {
      return `‚ö†Ô∏è <b>Voc√™ j√° tem um bot ativo!</b>

Use /status para ver estat√≠sticas
Use /stop para parar o bot`;
    }

    // Par√¢metros do comando: /start R_10 demo 1
    const symbol = params[0] || 'R_10';
    const accountType = params[1] || 'demo';
    const stake = parseFloat(params[2]) || 1.00;

    // Valida√ß√µes
    if (!['demo', 'real'].includes(accountType.toLowerCase())) {
      return `‚ùå <b>Tipo de conta inv√°lido</b>

Use: <code>demo</code> ou <code>real</code>
Exemplo: <code>/start R_10 demo 1</code>`;
    }

    // Buscar configura√ß√µes do usu√°rio
    const [userSettings] = await connection.execute(
      'SELECT deriv_token_demo, deriv_token_real FROM user_settings WHERE user_id = ?',
      [user.id]
    );

    const tokenField = accountType.toLowerCase() === 'demo' ? 'deriv_token_demo' : 'deriv_token_real';
    const hasToken = userSettings.length > 0 && userSettings[0][tokenField];

    if (!hasToken) {
      return `‚ùå <b>Token n√£o configurado</b>

Configure seu token da conta <b>${accountType.toUpperCase()}</b>:
1. Acesse https://mvb-pro.bragantini.com.br
2. V√° em Configura√ß√µes
3. Insira seu Token Deriv (${accountType})

Depois envie /start novamente.`;
    }

    // Criar sess√£o
    await connection.execute(
      `INSERT INTO bot_sessions 
       (user_id, telegram_chat_id, is_active, source, symbol, account_type, stake)
       VALUES (?, ?, TRUE, 'telegram', ?, ?, ?)`,
      [user.id, chatId, symbol, accountType.toLowerCase(), stake]
    );

    return `‚úÖ <b>Bot Zeus Iniciado!</b>

üë§ Usu√°rio: ${user.name}
üìä S√≠mbolo: ${symbol}
üíº Conta: ${accountType.toUpperCase()}
üí∞ Stake: $${stake.toFixed(2)}
‚öôÔ∏è Estrat√©gia: Zeus

ü§ñ O bot est√° rodando em <b>background</b>
üì± Voc√™ pode fechar o Telegram

<b>Comandos dispon√≠veis:</b>
/status - Ver estat√≠sticas
/stop - Parar bot
/config - Alterar configura√ß√µes`;
  } catch (error) {
    console.error('‚ùå Erro no /start:', error);
    return `‚ùå <b>Erro ao iniciar bot</b>

${error.message}

Tente novamente ou contate o suporte.`;
  }
}

// ===== COMANDO: /stop =====
async function handleStop(connection, chatId, username) {
  try {
    const [users] = await connection.execute(
      'SELECT id, name FROM users WHERE telegram_chat_id = ?',
      [chatId]
    );

    if (users.length === 0) {
      return `‚ùå Usu√°rio n√£o encontrado. Use /start primeiro.`;
    }

    const user = users[0];

    // Buscar sess√£o ativa
    const [sessions] = await connection.execute(
      `SELECT id, current_profit, trades_count, wins_count, losses_count, started_at 
       FROM bot_sessions 
       WHERE user_id = ? AND is_active = TRUE`,
      [user.id]
    );

    if (sessions.length === 0) {
      return `‚ö†Ô∏è Nenhum bot ativo encontrado.`;
    }

    const session = sessions[0];
    const accuracy = session.trades_count > 0 
      ? ((session.wins_count / session.trades_count) * 100).toFixed(2)
      : '0.00';

    const duration = Math.floor((Date.now() - new Date(session.started_at).getTime()) / 1000 / 60);
    const currentProfit = parseFloat(session.current_profit) || 0;

    // Parar sess√£o
    await connection.execute(
      'UPDATE bot_sessions SET is_active = FALSE, stopped_at = NOW() WHERE id = ?',
      [session.id]
    );

    return `‚èπÔ∏è <b>Bot Zeus Parado</b>

üìä <b>Resumo da Sess√£o:</b>
üí∞ Lucro: $${currentProfit.toFixed(2)}
üìà Trades: ${session.trades_count} (${session.wins_count}W / ${session.losses_count}L)
üéØ Precis√£o: ${accuracy}%
‚è±Ô∏è Dura√ß√£o: ${duration} minutos

Obrigado por usar o Zeus Bot! üöÄ`;
  } catch (error) {
    console.error('‚ùå Erro no /stop:', error);
    return `‚ùå Erro ao parar bot: ${error.message}`;
  }
}

// ===== COMANDO: /status =====
async function handleStatus(connection, chatId, username) {
  try {
    const [users] = await connection.execute(
      'SELECT id, name FROM users WHERE telegram_chat_id = ?',
      [chatId]
    );

    if (users.length === 0) {
      return `‚ùå Usu√°rio n√£o encontrado. Use /start primeiro.`;
    }

    const user = users[0];

    const [sessions] = await connection.execute(
      `SELECT * FROM bot_sessions 
       WHERE user_id = ? AND is_active = TRUE`,
      [user.id]
    );

    if (sessions.length === 0) {
      return `‚ö†Ô∏è Nenhum bot ativo.

Use /start para iniciar.`;
    }

    const session = sessions[0];
    const accuracy = session.trades_count > 0 
      ? ((session.wins_count / session.trades_count) * 100).toFixed(2)
      : '0.00';

    const duration = Math.floor((Date.now() - new Date(session.started_at).getTime()) / 1000 / 60);
    const lastTrade = session.last_trade_at 
      ? new Date(session.last_trade_at).toLocaleString('pt-BR')
      : 'Nenhum trade ainda';

    // Converter para n√∫meros (podem vir como string do banco)
    const stake = parseFloat(session.stake) || 0;
    const currentProfit = parseFloat(session.current_profit) || 0;
    const stopLoss = parseFloat(session.stop_loss) || 0;
    const stopWin = parseFloat(session.stop_win) || 0;

    return `üìä <b>Status do Bot Zeus</b>

ü§ñ Status: <b>ATIVO</b> ‚úÖ
üìä S√≠mbolo: ${session.symbol}
üíº Conta: ${session.account_type.toUpperCase()}
üí∞ Stake: $${stake.toFixed(2)}

<b>Estat√≠sticas:</b>
üíµ Lucro: $${currentProfit.toFixed(2)}
üìà Trades: ${session.trades_count} (${session.wins_count}W / ${session.losses_count}L)
üéØ Precis√£o: ${accuracy}%
‚è±Ô∏è Tempo ativo: ${duration} min
üïê √öltimo trade: ${lastTrade}

<b>Stop Loss/Win:</b>
üî¥ Stop Loss: $${stopLoss.toFixed(2)}
üü¢ Stop Win: $${stopWin.toFixed(2)}`;
  } catch (error) {
    console.error('‚ùå Erro no /status:', error);
    return `‚ùå Erro ao buscar status: ${error.message}`;
  }
}

// ===== COMANDO: /config =====
async function handleConfig(connection, chatId, username, params) {
  try {
    const [users] = await connection.execute(
      'SELECT id FROM users WHERE telegram_chat_id = ?',
      [chatId]
    );

    if (users.length === 0) {
      return `‚ùå Usu√°rio n√£o encontrado. Use /start primeiro.`;
    }

    const user = users[0];

    // Buscar sess√£o ativa
    const [sessions] = await connection.execute(
      'SELECT id FROM bot_sessions WHERE user_id = ? AND is_active = TRUE',
      [user.id]
    );

    if (sessions.length === 0) {
      return `‚ö†Ô∏è Nenhum bot ativo. Use /start primeiro.`;
    }

    const session = sessions[0];

    // Validar par√¢metros
    if (params.length < 2) {
      return `‚ùå <b>Uso incorreto</b>

<b>Exemplos:</b>
<code>/config stake 2</code>
<code>/config symbol R_25</code>
<code>/config account real</code>`;
    }

    const configType = params[0].toLowerCase();
    const configValue = params[1];

    switch (configType) {
      case 'stake': {
        const stake = parseFloat(configValue);
        if (isNaN(stake) || stake <= 0) {
          return `‚ùå Valor inv√°lido. Use um n√∫mero maior que 0.`;
        }
        
        await connection.execute(
          'UPDATE bot_sessions SET stake = ? WHERE id = ?',
          [stake, session.id]
        );
        
        return `‚úÖ <b>Stake atualizado</b>\n\nüí∞ Novo valor: $${stake.toFixed(2)}`;
      }

      case 'symbol': {
        const validSymbols = ['R_10', 'R_25', 'R_50', 'R_75', 'R_100', 'BOOM_1000', 'CRASH_1000'];
        if (!validSymbols.includes(configValue.toUpperCase())) {
          return `‚ùå S√≠mbolo inv√°lido.\n\n<b>S√≠mbolos v√°lidos:</b>\n${validSymbols.join(', ')}`;
        }
        
        await connection.execute(
          'UPDATE bot_sessions SET symbol = ? WHERE id = ?',
          [configValue.toUpperCase(), session.id]
        );
        
        return `‚úÖ <b>S√≠mbolo atualizado</b>\n\nüìä Novo ativo: ${configValue.toUpperCase()}`;
      }

      case 'account': {
        if (!['demo', 'real'].includes(configValue.toLowerCase())) {
          return `‚ùå Tipo inv√°lido. Use <code>demo</code> ou <code>real</code>.`;
        }
        
        await connection.execute(
          'UPDATE bot_sessions SET account_type = ? WHERE id = ?',
          [configValue.toLowerCase(), session.id]
        );
        
        return `‚úÖ <b>Tipo de conta atualizado</b>\n\nüíº Nova conta: ${configValue.toUpperCase()}`;
      }

      default:
        return `‚ùå Configura√ß√£o desconhecida: ${configType}\n\nUse: stake, symbol ou account`;
    }

  } catch (error) {
    console.error('‚ùå Erro no /config:', error);
    return `‚ùå Erro ao alterar configura√ß√£o: ${error.message}`;
  }
}

// ===== COMANDO: /help =====
function handleHelp() {
  return `ü§ñ <b>Zeus Bot - Comandos Dispon√≠veis</b>

<b>Controles B√°sicos:</b>
/start [symbol] [account] [stake] - Iniciar bot
  Exemplo: <code>/start R_10 demo 1</code>

/stop - Parar bot

/status - Ver estat√≠sticas em tempo real

<b>Configura√ß√µes:</b>
/config stake [valor] - Alterar stake
  Exemplo: <code>/config stake 2</code>

/config symbol [s√≠mbolo] - Alterar ativo
  Exemplo: <code>/config symbol R_25</code>

/config account [tipo] - Alterar conta
  Exemplo: <code>/config account real</code>

<b>Informa√ß√µes:</b>
/balance - Ver saldo da conta Deriv

/help - Mostrar esta mensagem

<b>Suporte:</b>
Em caso de d√∫vidas: https://mvb-pro.bragantini.com.br`;
}

// ===== HANDLER PRINCIPAL =====
module.exports = async (req, res) => {
  // CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  let connection;

  try {
    const update = req.body;
    
    if (!update.message || !update.message.text) {
      return res.status(200).json({ ok: true });
    }

    const chatId = update.message.chat.id.toString();
    const username = update.message.from.username || update.message.from.first_name || 'Unknown';
    const text = update.message.text.trim();

    console.log(`üì± Telegram: ${username} (${chatId}): ${text}`);

    // Conectar ao banco
    connection = await mysql.createConnection(DB_CONFIG);

    // Parsear comando
    const parts = text.split(' ');
    const command = parts[0].toLowerCase();
    const params = parts.slice(1);

    let response = '';

    // Executar comando
    switch (command) {
      case '/start':
        response = await handleStart(connection, chatId, username, params);
        break;
      
      case '/stop':
        response = await handleStop(connection, chatId, username);
        break;
      
      case '/status':
        response = await handleStatus(connection, chatId, username);
        break;
      
      case '/config':
        response = await handleConfig(connection, chatId, username, params);
        break;
      
      case '/help':
        response = handleHelp();
        break;
      
      default:
        response = `‚ùì Comando n√£o reconhecido: ${command}

Use /help para ver comandos dispon√≠veis.`;
    }

    // Enviar resposta
    await sendTelegramMessage(chatId, response);

    // Log do comando
    await logCommand(connection, chatId, username, command, params, response, true);

    res.status(200).json({ ok: true });

  } catch (error) {
    console.error('‚ùå Erro no telegram-bot:', error);
    res.status(500).json({ error: error.message });
  } finally {
    if (connection) {
      await connection.end();
    }
  }
};

